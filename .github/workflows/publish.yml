name: Publish Docker image
on:
  workflow_dispatch:
  repository_dispatch:
    types: [seanime_release]
  schedule:
    - cron: '0 0 * * *'  # Run daily to check for new releases

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check_version:
    name: Check for new release
    runs-on: ubuntu-latest
    outputs:
      build_needed: ${{ steps.check_build.outputs.BUILD_NEEDED }}
      seanime_version: ${{ steps.seanime_release.outputs.LATEST_RELEASE }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        
      - name: Get latest release of 5rahim/seanime
        id: seanime_release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/5rahim/seanime/releases/latest | jq -r .tag_name)
          echo "LATEST_RELEASE=${LATEST_RELEASE}" >> $GITHUB_OUTPUT
          echo "Latest 5rahim/seanime release: ${LATEST_RELEASE}"
          
      - name: Check if build is needed
        id: check_build
        run: |
          CURRENT_VERSION=$(cat .version 2>/dev/null || echo "none")
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "BUILD_NEEDED=true" >> $GITHUB_OUTPUT
            echo "Manual trigger detected. Force building."
          elif [ "${{ steps.seanime_release.outputs.LATEST_RELEASE }}" != "${CURRENT_VERSION}" ]; then
            echo "BUILD_NEEDED=true" >> $GITHUB_OUTPUT
            echo "New version detected. Build needed."
          else
            echo "BUILD_NEEDED=false" >> $GITHUB_OUTPUT
            echo "No new version. Skipping build."
          fi

  prepare:
    name: Prepare repository
    runs-on: ubuntu-latest
    needs: check_version
    if: needs.check_version.outputs.build_needed == 'true'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        
      - name: Prepare the repository
        run: |
          echo "=== BEFORE prepare script ==="
          ls -la
          echo "=== .docker directory contents ==="
          ls -la .docker/
          
          # BACKUP .docker directory before prepare script
          cp -r .docker /tmp/.docker-backup
          
          chmod +x ./.docker/prepare.sh
          ./.docker/prepare.sh ${{ needs.check_version.outputs.seanime_version }}
          
          echo "=== AFTER prepare script ==="
          ls -la
          echo "=== .docker directory contents ==="
          ls -la .docker/ || echo ".docker directory missing!"
          
          # RESTORE .docker directory
          cp -r /tmp/.docker-backup .docker
          
          echo "=== AFTER restoring .docker ==="
          ls -la .docker/
        shell: bash
        
      - name: Upload prepared files
        uses: actions/upload-artifact@v4
        with:
          name: prepared-repo
          path: .
          retention-days: 1

  build-amd64:
    name: Build AMD64
    runs-on: ubuntu-latest
    needs: [check_version, prepare]
    if: needs.check_version.outputs.build_needed == 'true'
    steps:
      - name: Download prepared files
        uses: actions/download-artifact@v4
        with:
          name: prepared-repo
          path: .
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build AMD64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/Dockerfile
          platforms: linux/amd64
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            SEANIME_VERSION=${{ needs.check_version.outputs.seanime_version }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64
          
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-amd64
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  build-arm64:
    name: Build ARM64
    runs-on: ubuntu-22.04-arm  # Native ARM64 runner
    needs: [check_version, prepare]
    if: needs.check_version.outputs.build_needed == 'true'
    steps:
      - name: Download prepared files
        uses: actions/download-artifact@v4
        with:
          name: prepared-repo
          path: .
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build ARM64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/Dockerfile
          platforms: linux/arm64
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            SEANIME_VERSION=${{ needs.check_version.outputs.seanime_version }}
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64
          
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-arm64
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Create multi-platform manifest
    runs-on: ubuntu-latest
    needs: [check_version, build-amd64, build-arm64]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.check_version.outputs.seanime_version }}
            type=raw,value=latest
            
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
            
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  update_version:
    name: Update version file
    runs-on: ubuntu-latest
    needs: [check_version, merge]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update version file
        run: |
          echo "${{ needs.check_version.outputs.seanime_version }}" > .version
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .version
          git commit -m "Update to seanime version ${{ needs.check_version.outputs.seanime_version }}"
          git push
